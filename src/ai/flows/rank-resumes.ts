// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Ranks student resumes based on relevance to a job description.
 *
 * - rankResumes - A function that handles the resume ranking process.
 * - RankResumesInput - The input type for the rankResumes function.
 * - RankResumesOutput - The return type for the rankResumes function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RankResumesInputSchema = z.object({
  jobDescription: z.string().describe('The job description to rank resumes against.'),
  resumes: z
    .array(z.string())
    .describe('An array of student resumes, each as a string of text.'),
});

export type RankResumesInput = z.infer<typeof RankResumesInputSchema>;

const RankResumesOutputSchema = z.array(z.object({
  resume: z.string().describe('The resume content.'),
  rank: z.number().describe('The relevance rank of the resume to the job description (0-1).'),
  reason: z.string().describe('Explanation of why the resume was ranked this way.'),
}));

export type RankResumesOutput = z.infer<typeof RankResumesOutputSchema>;

export async function rankResumes(input: RankResumesInput): Promise<RankResumesOutput> {
  return rankResumesFlow(input);
}

const rankResumesPrompt = ai.definePrompt({
  name: 'rankResumesPrompt',
  input: {schema: RankResumesInputSchema},
  output: {schema: RankResumesOutputSchema},
  prompt: `You are an expert recruiter. Given the following job description and a list of resumes, rank each resume based on its relevance to the job description. Provide a rank from 0 to 1 (inclusive) and a reason for the ranking.

Job Description: {{{jobDescription}}}

Resumes:
{{#each resumes}}
  - {{{this}}}
{{/each}}`,
});

const rankResumesFlow = ai.defineFlow(
  {
    name: 'rankResumesFlow',
    inputSchema: RankResumesInputSchema,
    outputSchema: RankResumesOutputSchema,
  },
  async input => {
    const {output} = await rankResumesPrompt(input);
    return output!;
  }
);
